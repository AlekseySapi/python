import os


line = "\n##### ##### ##### ##### #####"


def detect_language(text):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if any('–∞' <= char <= '—è' or '–ê' <= char <= '–Ø' for char in text):
        return 'ru'
    elif any('a' <= char <= 'z' or 'A' <= char <= 'Z' for char in text):
        return 'en'
    elif any('Œ±' <= char <= 'œâ' or 'Œë' <= char <= 'Œ©' for char in text):
        return 'greek'
    elif any('◊ê' <= char <= '◊™' for char in text):
        return 'hebr'
    elif any('ê§Ä' <= char <= 'ê§ï' for char in text):
        return 'phnx'
    elif any('·ö†' <= char <= '·õû' for char in text):
        return 'rune'
    elif any('ÿ£' <= char <= 'ÿ∫' for char in text):
        return 'arab'
    else:
        return None


# –ú–∞–ø–ø–∏–Ω–≥ (–∞–Ω–≥–ª–∏–π—Å–∫–∞—è –∏ —Ä—É—Å—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏)
en = '`qwertyuiop[]asdfghjkl;\'zxcvbnm,./~@#$%^&QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?'
ru = '—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.–Å"‚Ññ;%:?–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™/–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ,'

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é str.maketrans
en_to_ru = str.maketrans(en, ru)
ru_to_en = str.maketrans(ru, en)

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É —Ä–∞—Å–∫–ª–∞–¥–∫–∞–º–∏
def translate_layout(text, current_layout):
    if current_layout == 'en':
        return text.translate(en_to_ru)
    elif current_layout == 'ru':
        return text.translate(ru_to_en)


# –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è
def caesar_cipher(text, shift, language, alphabet):
    if language != 'hebr' or language != 'phnx' or language != 'arab' or language != 'rune':
        lower_alphabet = alphabet.lower()
        result = []
        for char in text:
            if char in lower_alphabet:
                idx = lower_alphabet.index(char)
                new_idx = idx + shift
                result.append(lower_alphabet[new_idx % len(lower_alphabet)])
            elif char in alphabet:
                idx = alphabet.index(char)
                new_idx = idx + shift
                result.append(alphabet[new_idx % len(alphabet)])
            else:
                result.append(char)  # –ü—Ä–æ–ø—É—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –≤—Ö–æ–¥—è—â–∏—Ö –≤ –∞–ª—Ñ–∞–≤–∏—Ç
    else:
        result = []
        for char in text:
            if char in alphabet:
                idx = alphabet.index(char)
                new_idx = idx + shift
                result.append(alphabet[new_idx % len(alphabet)])
            else:
                result.append(char)  # –ü—Ä–æ–ø—É—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –≤—Ö–æ–¥—è—â–∏—Ö –≤ –∞–ª—Ñ–∞–≤–∏—Ç
    return ''.join(result)


# –®–∏—Ñ—Ä –ê—Ç–±–∞—à
def atbash(text, language, alphabet):
    if language == 'hebr' or language == 'phnx' or language == 'arab' or language == 'rune':
        # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∞–ª—Ñ–∞–≤–∏—Ç
        reverse_alphabet = alphabet[::-1]

        # –ú–∞–ø–ø–∏–Ω–≥ –±—É–∫–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –Ω–∞ –∏—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ
        translation = str.maketrans(alphabet, reverse_alphabet)
    else:
        lower_alphabet = alphabet.lower()

        # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∞–ª—Ñ–∞–≤–∏—Ç
        reverse_alphabet = alphabet[::-1]
        reverse_lower_alphabet = lower_alphabet[::-1]
    
        # –ú–∞–ø–ø–∏–Ω–≥ –±—É–∫–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –Ω–∞ –∏—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ
        translation = str.maketrans(alphabet + lower_alphabet, reverse_alphabet + reverse_lower_alphabet)
    
    return text.translate(translation)


def main():
    print(line)
    while True:
        file_path = input("# –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:\n> ").strip()
        if not os.path.exists(file_path):
            print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            break

    with open(file_path, 'r', encoding='utf-8') as file:
        original_text = file.read()

    language = detect_language(original_text)
    if not language:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞.")
        return
    
    print(f"–Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ -> [{language}]")

    if language == 'ru':
        alphabet = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
    elif language == 'en':
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    elif language == 'greek':
        alphabet = 'ŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©'
    elif language == 'hebr':
        alphabet = '◊ê◊ë◊í◊ì◊î◊ï◊ñ◊ó◊ò◊ô◊õ◊ú◊û◊†◊°◊¢◊§◊¶◊ß◊®◊©◊™'
    elif language == 'phnx':
        alphabet = 'ê§Äê§Åê§Çê§Éê§Ñê§Öê§Üê§áê§àê§âê§äê§ãê§åê§çê§éê§èê§êê§ëê§íê§ìê§îê§ï'
    elif language == 'arab':
        alphabet = 'ÿ£ÿ®ÿ¨ÿØÔª©Ÿàÿ≤ÿ≠ÿ∑ŸäŸÉŸÑŸÖŸÜÿ≥ÿπŸÅÿµŸÇÿ±ÿ¥ÿ™ÿ´ÿÆÿ∞ÿ∂ÿ∏ÿ∫'
    elif language == 'rune':
        alphabet = '·ö†·ö¢·ö¶·ö®·ö±·ö≤·ö∑·öπ·ö∫·öæ·õÅ·õÉ·õà·õá·õâ·õä·õè·õí·õñ·õó·õö·õú·õü·õû'
        


    while True:

        if language in {'ru', 'en'}:
            while True:
                print(line)
                choice1 = input("# –í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ñ—Ä\n  0 - –°–º–µ–Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏, 1 - —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è, 2 - —à–∏—Ñ—Ä –ê—Ç–±–∞—à (Q/q - –≤—ã—Ö–æ–¥):\n> ")
                if choice1 == "q" or choice1 == "Q":
                    exit()
                elif choice1 == "0" or choice1 == "1" or choice1 == "2":
                    break

        else:
            while True:
                print(line)
                choice1 = input("# –í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ñ—Ä\n  1 - —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è, 2 - —à–∏—Ñ—Ä –ê—Ç–±–∞—à (Q/q - –≤—ã—Ö–æ–¥):\n> ")
                if choice1 == "q" or choice1 == "Q":
                    exit()
                elif choice1 == "1" or choice1 == "2":
                    break
        

        if choice1 == "0":

            translated_text = translate_layout(original_text, language)

            with open(file_path, 'a', encoding='utf-8') as file:
                file.write("\n\n=== === ===\n")
                file.write(translated_text)

            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª.")


        if choice1 == "1":

            while True:
                choice2 = input(" (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è: 3)\n  1 - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, 2 - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:\n> ")
                if choice2 == "1" or choice2 == "2":
                    break

            if choice2 == "1":
                while True:
                    shift = input(">> –ù–∞ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–¥–≤–∏–Ω—É—Ç—å? ").strip()
                    if shift.lstrip('-').isdigit():
                        shift = int(shift)
                        break
            
            if choice2 == "2":
                while True:
                    shift = input(">> –ö–∞–∫–æ–π —Å–¥–≤–∏–≥ –±—ã–ª —É —à–∏—Ñ—Ä–∞? ").strip()
                    if shift.lstrip('-').isdigit():
                        shift = int(shift)
                        shift *= -1
                        break


            shift %= len(alphabet)

            encrypted_text = caesar_cipher(original_text, shift, language, alphabet)

            with open(file_path, 'a', encoding='utf-8') as file:
                file.write("\n\n=== === ===\n")
                file.write(encrypted_text)

            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª.")


        if choice1 == "2":

            encrypted_text = atbash(original_text, language, alphabet)

            with open(file_path, 'a', encoding='utf-8') as file:
                file.write("\n\n=== === ===\n")
                file.write(encrypted_text)

            print("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª.")


if __name__ == "__main__":
    main()