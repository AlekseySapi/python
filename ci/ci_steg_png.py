import os
from PIL import Image

line = '\n####### ####### ####### ####### #######'
stop_symb = '00000000'


def encode_text_in_png(input_file, output_file, secret_text):
    binary_text = ''.join(format(byte, '08b') for byte in secret_text.encode('utf-8')) + stop_symb  # –°—Ç–æ–ø-—Å–∏–º–≤–æ–ª

    img = Image.open(input_file)
    pixels = img.load()
    width, height = img.size
    data_index = 0

    for y in range(height):
        for x in range(width):
            r, g, b = pixels[x, y] if img.mode == 'RGB' else pixels[x, y][:3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ RGB –∫–∞–Ω–∞–ª—ã

            # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ LSB –∫–∞–Ω–∞–ª–æ–≤
            if data_index < len(binary_text):
                r = (r & 0b11111110) | int(binary_text[data_index])  # –ö–æ–¥–∏—Ä—É–µ–º –±–∏—Ç –≤ LSB
                data_index += 1
            if data_index < len(binary_text):
                g = (g & 0b11111110) | int(binary_text[data_index])
                data_index += 1
            if data_index < len(binary_text):
                b = (b & 0b11111110) | int(binary_text[data_index])
                data_index += 1

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–∏–∫—Å–µ–ª—å
            if img.mode == 'RGBA':
                a = pixels[x, y][3]  # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ñ–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                pixels[x, y] = (r, g, b, a)
            else:
                pixels[x, y] = (r, g, b)  # –î–ª—è RGB

            if data_index >= len(binary_text):
                break
        if data_index >= len(binary_text):
            break

    img.save(output_file)
    print("\n‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞ –≤ —Ñ–∞–π–ª–µ:", output_file)
    print()


def decode_text_from_png(input_file):
    img = Image.open(input_file)
    pixels = img.load()

    width, height = img.size
    binary_text = ''

    for y in range(height):
        for x in range(width):
            r, g, b = pixels[x, y] if img.mode == 'RGB' else pixels[x, y][:3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ RGB –∫–∞–Ω–∞–ª—ã

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–ª–∞–¥—à–∏—Ö –±–∏—Ç–æ–≤
            binary_text += str(r & 1)  # –ß–∏—Ç–∞–µ–º –º–ª–∞–¥—à–∏–π –±–∏—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            binary_text += str(g & 1)  # –ß–∏—Ç–∞–µ–º –º–ª–∞–¥—à–∏–π –±–∏—Ç –∑–µ–ª—ë–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            binary_text += str(b & 1)  # –ß–∏—Ç–∞–µ–º –º–ª–∞–¥—à–∏–π –±–∏—Ç —Å–∏–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞

    byte_array = []
    for i in range(0, len(binary_text), 8):
        byte = binary_text[i:i+8]
        if byte == stop_symb:  # –°—Ç–æ–ø-—Å–∏–º–≤–æ–ª
            break
        byte_array.append(int(byte, 2))

    try:
        secret_text = bytes(byte_array).decode('utf-8')  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        print(f"\nüîç –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:\n\n  {secret_text}")
    except UnicodeDecodeError:
        print("\n‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def main():
    while True:
        print(line)
        while True:
            file = input("# –í–≤–µ–¥–∏—Ç–µ –∏–º—è PNG-—Ñ–∞–π–ª–∞:\n> ")
            if not os.path.isfile(file):
                print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
            else:
                break

        filename, ext = os.path.splitext(file)
        if ext.lower() != ".png":
            print("\n‚ö†Ô∏è  –û—à–∏–±–∫–∞: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PNG-—Ñ–∞–π–ª—ã.")
            continue

        choice = ''
        while choice not in ('1', '2'):
            choice = input("\n  1 - –°–ø—Ä—è—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç, 2 - –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç:\n> ")

        if choice == '1':
            text = input("\n–í–≤–µ–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n> ")
            output_file = f"{filename}_hidden.png"
            encode_text_in_png(file, output_file, text)
        else:
            decode_text_from_png(file)


if __name__ == "__main__":
    main()